#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Server::Starter qw(start_server);

sub usage {
    print <<"EOT";
Usage: $0 [options] server-prog server-arg1 server-arg2 ...

Example:
  start_server --port=80 -- my_server
                           listen to port 80 and start my_server

  start_server -- plackup -s FCGI --listen=/tmp/fcgi.sock ...
                           start Plack using FCGI backend binding to a unix
                           socket

Options:
  --port=(port|host:port)  TCP port to listen to (if omitted, will not bind
                           to any ports)
  --interval=seconds       minimum interval to respawn the server process
                           (default: 1)
  --pid-file=file.pid      write process id of start_server to the file
                           (default: do not write)
  --signal-on-hup=SIGNAME  name of the signal to be sent to the server process
                           when start_server receives a SIGHUP (default:
                           SIGTERM)
  --status-file=filename   writes the status of the servers (default: none)

  --restart                this is a wrapper command around, it reads the pid
                           of the start_server process from --pid-file and
                           sends SIGHUP to the process and waits until the
                           old generation server exits by monitoring the
                           contents of the --status-file

EOT
    exit 0;
}

my %opts = (
    port => [],
);

GetOptions(
    map {
        $_ => do {
            my $name = (split '=', $_, 2)[0];
            $name =~ s/-/_/g;
            $opts{$name} ||= undef;
            ref($opts{$name}) ? $opts{$name} : \$opts{$name};
        },
    } qw(port=s interval=i log-file=s pid-file=s signal-on-hup=s status-file=s
         help version),
) or exit 1;
usage()
    if $opts{help};
if ($opts{version}) {
    print "$Server::Starter::VERSION\n";
    exit 0;
}

if ($opts{restart}) {
    restart_server(%opts);
    exit 0;
}

# validate options
die "server program not specified\n"
    unless @ARGV;

warn "*** $opts{pid_file}";
start_server(
    %opts,
    exec => \@ARGV,
);

__END__

=head1 NAME

start_server - a superdaemon for hot-deploying server programs

=head1 SYNOPSIS

  start_server [options] server-prog server-arg1 server-arg2 ...

=head1 DESCRIPTION

This script is a frontend of L<Server::Starter>.  For more information please refer to the documenation of the module.

Use --help to find out how to use the script.

=head1 AUTHOR

Kazuho Oku E<lt>kazuhooku@gmail.comE<gt>
Copyright (C) 2009 Cybozu Labs, Inc.

=head1 SEE ALSO

L<Server::Starter>

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
